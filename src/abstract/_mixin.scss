@use 'sass:map';

$ac-rounded: (
	unset: unset,
	0: 0,
	x-small: var(--ac-rounded-xs),
	small: var(--ac-rounded-sm),
	medium: var(--ac-rounded-md),
	large: var(--ac-rounded-lg),
	full: var(--ac-rounded-full),
);


$ac-backgrounds: (
	unset: unset,
	primary: var(--background-primary),
	secondary: var(--background-secondary),
	secondary-alt: var(--background-secondary-alt),
	tertiary: var(--background-tertiary),
	floating: var(--background-floating),
	modifier-active: var(--background-modifier-active),
	modifier-selected: var(--background-modifier-selected),
	modifier-hover: var(--background-modifier-hover),
	modifier-accent: var(--background-modifier-accent),
	transparent: transparent,
);

$ac-spacing: (
	unset: unset,
	auto: auto,
	0: 0,
	xx-small: var(--ac-spacing-xxs),
	x-small: var(--ac-spacing-xs),
	small: var(--ac-spacing-sm),
	medium: var(--ac-spacing-md),
	large: var(--ac-spacing-lg),
	x-large: var(--ac-spacing-xl),
	2x-large: var(--ac-spacing-2xl),
	3x-large: var(--ac-spacing-3xl),
	4x-large: var(--ac-spacing-4xl),
);

@mixin ac-spacing-styling($m: null,
	$mx: null,
	$my: null,
	$mb: null,
	$mt: null,
	$ml: null,
	$mr: null) {
	@if $m and map.has-key($ac-spacing, $m) {
		margin: map.get($ac-spacing, $m) !important;
	}

	@else if $m {
		margin: $m !important;
	}

	@if $mx and map.has-key($ac-spacing, $mx) {
		margin-left: map.get($ac-spacing, $mx) !important;
		margin-right: map.get($ac-spacing, $mx) !important;
	}

	@else if $mx {
		margin-left: $mx !important;
		margin-right: $mx !important;
	}

	@if $my and map.has-key($ac-spacing, $my) {
		margin-top: map.get($ac-spacing, $my) !important;
		margin-bottom: map.get($ac-spacing, $my) !important;
	}

	@else if $my {
		margin-top: $my !important;
		margin-bottom: $my !important;
	}

	@each $id, $style in (mb: margin-bottom, mt: margin-top, ml: margin-left, mr: margin-right) {
		$value: null;

		@if $id ==mb {
			$value: $mb;
		}

		@else if $id ==mt {
			$value: $mt;
		}

		@else if $id ==ml {
			$value: $ml;
		}

		@else if $id ==mr {
			$value: $mr;
		}

		@if $value {
			@if map.has-key($ac-spacing, $value) {
				#{$style}: map.get($ac-spacing, $value) !important;
			}

			@else {
				#{$style}: $value !important;
			}
		}
	}
}

@mixin ac-padding-styling($p: null,
	$px: null,
	$py: null,
	$pb: null,
	$pt: null,
	$pl: null,
	$pr: null) {
	@each $id, $value in $ac-spacing {
		@if $p ==$id {
			padding: $value !important;
		}

		@if $px ==$id {
			padding-left: $value !important;
			padding-right: $value !important;
		}

		@if $py ==$id {
			padding-top: $value !important;
			padding-bottom: $value !important;
		}

		@if $pb ==$id {
			padding-bottom: $value !important;
		}

		@if $pt ==$id {
			padding-top: $value !important;
		}

		@if $pl ==$id {
			padding-left: $value !important;
		}

		@if $pr ==$id {
			padding-right: $value !important;
		}
	}
}

@mixin ac-color-styling($bg: null, $bgc: null, $c: null) {
	@if $c {
		color: $c !important;
	}

	@if $bg {
		@if map.has-key($ac-backgrounds, $bg) {
			background: map.get($ac-backgrounds, $bg) !important;
		}

		@else {
			background: $bg !important;
		}
	}

	@if $bgc {
		@if map.has-key($ac-backgrounds, $bgc) {
			background-color: map.get($ac-backgrounds, $bgc) !important;
		}

		@else {
			background-color: $bgc !important;
		}
	}
}

@mixin ac-rounded-styling($br: null,
	$brt: null,
	$brb: null,
	$brr: null,
	$brl: null,
	$brtr: null,
	$brbr: null,
	$brtl: null,
	$brbl: null,
	$brx: null,
	$bry: null) {
	@each $id, $value in $ac-rounded {
		@if $br ==$id {
			border-radius: $value !important;
		}

		@if $brt ==$id {
			border-radius: $value $value 0 0 !important;
		}

		@if $brb ==$id {
			border-radius: 0 0 $value $value !important;
		}

		@if $brr ==$id {
			border-radius: 0 $value $value 0 !important;
		}

		@if $brl ==$id {
			border-radius: $value 0 0 $value !important;
		}

		@if $brtr ==$id {
			border-radius: 0 $value 0 0 !important;
		}

		@if $brbr ==$id {
			border-radius: 0 0 $value 0 !important;
		}

		@if $brtl ==$id {
			border-radius: $value 0 0 0 !important;
		}

		@if $brbl ==$id {
			border-radius: 0 0 0 $value !important;
		}

		@if $brx ==$id {
			border-radius: $value 0 $value 0 !important;
		}

		@if $bry ==$id {
			border-radius: 0 $value 0 $value !important;
		}
	}
}

@mixin ac-position-styling($pos: null,
	$d: null,
	$top: null,
	$bottom: null,
	$right: null,
	$left: null,
	$w: null,
	$h: null,
	$max-w: null,
	$max-h: null,
	$min-w: null,
	$min-h: null,
	$z: null) {
	@if $d {
		display: $d !important;
	}

	@if $z {
		z-index: $z !important;
	}

	@if $pos {
		position: $pos !important;
	}

	@if $max-w {
		max-width: $max-w !important;
	}

	@if $min-w {
		min-width: $min-w !important;
	}

	@if $max-h {
		max-height: $max-h !important;
	}

	@if $min-h {
		min-height: $min-h !important;
	}

	@if $w {
		@if $w ==fill {
			width: -webkit-fill-available !important;
		}

		@else {
			width: $w !important;
		}
	}

	@if $h {
		height: $h !important;
	}

	@each $id, $value in $ac-spacing {
		@if $left ==$id {
			$left: $value;
		}

		@if $right ==$id {
			$right: $value;
		}

		@if $top ==$id {
			$top: $value;
		}

		@if $bottom ==$id {
			$bottom: $value;
		}
	}

	@if $top {
		top: $top !important;
	}

	@if $bottom {
		bottom: $bottom !important;
	}

	@if $left {
		left: $left !important;
	}

	@if $right {
		right: $right !important;
	}
}

@mixin ac-transition-styling($l: null, $p: null, $d: null) {}

@mixin ac-flex-styling($f: null,
	$gap: null,
	$gapc: null,
	$gapr: null,
	$dir: null,
	$ac: null,
	$ai: null,
	$jc: null,
	$ji: null,
	$js: null,
	$as: null,
	$d: null,
	$wrap: null) {
	@if $f {
		flex: $f !important;
	}

	@if $wrap {
		flex-wrap: $wrap !important;
	}

	@if $dir {
		flex-direction: $dir !important;
	}

	@if $ac {
		align-content: $ac !important;
	}

	@if $ai {
		align-items: $ai !important;
	}

	@if $jc {
		justify-content: $jc !important;
	}

	@if $ji {
		justify-items: $ji !important;
	}

	@if $d {
		display: $d !important;
	}

	@else {
		display: flex !important;
	}

	@if $gap {
		@if map.has-key($ac-spacing, $gap) {
			gap: map.get($ac-spacing, $gap) !important;
		}

		@else {
			gap: $gap !important;
		}
	}

	@if $gapr {
		@if map.has-key($ac-spacing, $gapr) {
			grid-row-gap: map.get($ac-spacing, $gapr) !important;
		}

		@else {
			grid-row-gap: $gapr !important;
		}
	}

	@if $gapc {
		@if map.has-key($ac-spacing, $gapc) {
			grid-column-gap: map.get($ac-spacing, $gapc) !important;
		}

		@else {
			grid-column-gap: $gapc !important;
		}
	}

	@if $as {
		align-self: $as !important;
	}

	@if $js {
		justify-self: $js !important;
	}
}


@mixin ac-icon-replacement($ip: null, $ic: null, $ich: null) {
	@if $ip {
		mask: var(--#{$ip}-path) !important;
	}

	@include ac-color-styling($bg: currentColor);
	@include ac-position-styling($w: 24px, $h: 24px, $d: inline-block);
	mask-size: 100% 100%;

	svg {
		@include ac-position-styling($d: none);
	}

	&:hover {
		@include ac-color-styling($bg: #{$ich});
	}
}