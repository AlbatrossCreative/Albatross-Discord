@use 'sass:map';
$ac-transitions: (

);
$ac-rounded: (
	unset: unset,
	0: 0,
	xx-small: var(--ac-rounded-xxs),
	x-small: var(--ac-rounded-xs),
	small: var(--ac-rounded-sm),
	medium: var(--ac-rounded-md),
	large: var(--ac-rounded-lg),
	full: var(--ac-rounded-full),
);

$ac-backgrounds: (
	unset: unset,
	primary: var(--background-primary),
	secondary: var(--background-secondary),
	secondary-alt: var(--background-secondary-alt),
	tertiary: var(--background-tertiary),
	floating: var(--background-floating),
	modifier-active: var(--background-modifier-active),
	modifier-selected: var(--background-modifier-selected),
	modifier-hover: var(--background-modifier-hover),
	modifier-accent: var(--background-modifier-accent),
	transparent: transparent,
);

$ac-spacing: (
	unset: unset,
	auto: auto,
	0: 0,
	xx-small: var(--ac-spacing-xxs),
	x-small: var(--ac-spacing-xs),
	small: var(--ac-spacing-sm),
	medium: var(--ac-spacing-md),
	large: var(--ac-spacing-lg),
	x-large: var(--ac-spacing-xl),
	2x-large: var(--ac-spacing-2xl),
	3x-large: var(--ac-spacing-3xl),
	4x-large: var(--ac-spacing-4xl),
);

// Helper for spacing properties
@mixin _ac-space($prop, $val) {
	@if map.has-key($ac-spacing, $val) {
		#{$prop}: map.get($ac-spacing, $val) !important;
	} @else {
		#{$prop}: $val !important;
	}
}
@mixin ac-border-styling(
	$style: solid,
	$w: null, 
	$color,
) {
	border-style: solid !important;
	@if $w {
		border-width: $w !important;
	} @else {
		border-width: 1px !important;
	}
	@if $color {
		@include _ac-bg(border-color, $color);
	}
}
@mixin ac-spacing-styling(
	$m: null,
	$mx: null,
	$my: null,
	$mb: null,
	$mt: null,
	$ml: null,
	$mr: null
) {
	@if $m {
		@include _ac-space(margin, $m);
	}

	@if $mx {
		@include _ac-space(margin-left, $mx);
		@include _ac-space(margin-right, $mx);
	}

	@if $my {
		@include _ac-space(margin-top, $my);
		@include _ac-space(margin-bottom, $my);
	}

	@if $mb {
		@include _ac-space(margin-bottom, $mb);
	}

	@if $mt {
		@include _ac-space(margin-top, $mt);
	}

	@if $ml {
		@include _ac-space(margin-left, $ml);
	}

	@if $mr {
		@include _ac-space(margin-right, $mr);
	}
}

@mixin ac-padding-styling(
	$p: null,
	$px: null,
	$py: null,
	$pb: null,
	$pt: null,
	$pl: null,
	$pr: null
) {
	@if $p {
		@include _ac-space(padding, $p);
	}

	@if $px {
		@include _ac-space(padding-left, $px);
		@include _ac-space(padding-right, $px);
	}

	@if $py {
		@include _ac-space(padding-top, $py);
		@include _ac-space(padding-bottom, $py);
	}

	@if $pb {
		@include _ac-space(padding-bottom, $pb);
	}

	@if $pt {
		@include _ac-space(padding-top, $pt);
	}

	@if $pl {
		@include _ac-space(padding-left, $pl);
	}

	@if $pr {
		@include _ac-space(padding-right, $pr);
	}
}

// Helper for backgrounds
@mixin _ac-bg($prop, $val) {
	@if map.has-key($ac-backgrounds, $val) {
		#{$prop}: map.get($ac-backgrounds, $val) !important;
	} @else {
		#{$prop}: $val !important;
	}
}

@mixin ac-color-styling($bg: null, $bgc: null, $c: null) {
	@if $c {
		color: $c !important;
	}

	@if $bg {
		@include _ac-bg(background, $bg);
	}

	@if $bgc {
		@include _ac-bg(background-color, $bgc);
	}
}

// Helper for rounded
@mixin _ac-rounded-corner($corners, $val) {
	@if map.has-key($ac-rounded, $val) {
		border-radius: #{map.get($ac-rounded, $val)} $corners !important;
	} @else {
		border-radius: #{$val} $corners !important;
	}
}

@mixin ac-rounded-styling(
	$br: null,
	$brt: null,
	$brb: null,
	$brr: null,
	$brl: null,
	$brtr: null,
	$brbr: null,
	$brtl: null,
	$brbl: null,
	$brx: null,
	$bry: null
) {
	@if $br {
		@if map.has-key($ac-rounded, $br) {
			border-radius: map.get($ac-rounded, $br) !important;
		} @else {
			border-radius: $br !important;
		}
	}

	@if $brt {
		@if map.has-key($ac-rounded, $brt) {
			border-radius: map.get($ac-rounded, $brt) map.get($ac-rounded, $brt) 0 0 !important;
		} @else {
			border-radius: $brt $brt 0 0 !important;
		}
	}

	@if $brb {
		@if map.has-key($ac-rounded, $brb) {
			border-radius: 0 0 map.get($ac-rounded, $brb) map.get($ac-rounded, $brb) !important;
		} @else {
			border-radius: 0 0 $brb $brb !important;
		}
	}

	@if $brr {
		@if map.has-key($ac-rounded, $brr) {
			border-radius: 0 map.get($ac-rounded, $brr) map.get($ac-rounded, $brb) 0 !important;
		} @else {
			border-radius: 0 $brr $brr 0 !important;
		}
	}

	@if $brl {
		@if map.has-key($ac-rounded, $brl) {
			border-radius: map.get($ac-rounded, $brl) 0 0 map.get($ac-rounded, $brl) !important;
		} @else {
			border-radius: $brl 0 0 $brl !important;
		}
	}

	@if $brtr {
		@if map.has-key($ac-rounded, $brtr) {
			border-radius: 0 map.get($ac-rounded, $brtr) 0 0 !important;
		} @else {
			border-radius: 0 $brtr 0 0 !important;
		}
	}

	@if $brbr {
		@if map.has-key($ac-rounded, $brbr) {
			border-radius: 0 0 map.get($ac-rounded, $brbr) 0 !important;
		} @else {
			border-radius: 0 0 $brbr 0 !important;
		}
	}

	@if $brtl {
		@if map.has-key($ac-rounded, $brtl) {
			border-radius: map.get($ac-rounded, $brtl) 0 0 0 !important;
		} @else {
			border-radius: $brtl 0 0 0 !important;
		}
	}

	@if $brbl {
		@if map.has-key($ac-rounded, $brbl) {
			border-radius: 0 0 0 map.get($ac-rounded, $brbl) !important;
		} @else {
			border-radius: 0 0 0 $brbl !important;
		}
	}

	@if $brx {
		@if map.has-key($ac-rounded, $brx) {
			border-radius: map.get($ac-rounded, $brx) 0 map.get($ac-rounded, $brx) 0 !important;
		} @else {
			border-radius: $brx 0 $brx 0 !important;
		}
	}

	@if $bry {
		@if map.has-key($ac-rounded, $bry) {
			border-radius: 0 map.get($ac-rounded, $bry) 0 map.get($ac-rounded, $bry) !important;
		} @else {
			border-radius: 0 $bry 0 $bry !important;
		}
	}
}

@mixin ac-position-styling(
	$pos: null,
	$d: null,
	$top: null,
	$bottom: null,
	$right: null,
	$left: null,
	$w: null,
	$h: null,
	$max-w: null,
	$max-h: null,
	$min-w: null,
	$min-h: null,
	$z: null
) {
	@if $d {
		display: $d !important;
	}

	@if $z {
		z-index: $z !important;
	}

	@if $pos {
		position: $pos !important;
	}

	@if $max-w {
		max-width: $max-w !important;
	}

	@if $min-w {
		min-width: $min-w !important;
	}

	@if $max-h {
		max-height: $max-h !important;
	}

	@if $min-h {
		min-height: $min-h !important;
	}

	@if $w {
		@if $w ==fill {
			width: -webkit-fill-available !important;
		} @else {
			width: $w !important;
		}
	}

	@if $h {
		height: $h !important;
	}

	@if $left {
		@include _ac-space(left, $left);
	}

	@if $right {
		@include _ac-space(right, $right);
	}

	@if $top {
		@include _ac-space(top, $top);
	}

	@if $bottom {
		@include _ac-space(bottom, $bottom);
	}
}

@mixin ac-transition-styling($l: null, $p: null, $d: null) {
}

@mixin ac-flex-styling(
	$f: null,
	$gap: null,
	$gapc: null,
	$gapr: null,
	$dir: null,
	$ac: null,
	$ai: null,
	$jc: null,
	$ji: null,
	$js: null,
	$as: null,
	$d: null,
	$wrap: null
) {
	@if $f {
		flex: $f !important;
	}

	@if $wrap {
		flex-wrap: $wrap !important;
	}

	@if $dir {
		flex-direction: $dir !important;
	}

	@if $ac {
		align-content: $ac !important;
	}

	@if $ai {
		align-items: $ai !important;
	}

	@if $jc {
		justify-content: $jc !important;
	}

	@if $ji {
		justify-items: $ji !important;
	}

	@if $d {
		display: $d !important;
	} @else {
		display: flex !important;
	}

	@if $gap {
		@include _ac-space(gap, $gap);
	}

	@if $gapr {
		@include _ac-space(grid-row-gap, $gapr);
	}

	@if $gapc {
		@include _ac-space(grid-column-gap, $gapc);
	}

	@if $as {
		align-self: $as !important;
	}

	@if $js {
		justify-self: $js !important;
	}
}

@mixin ac-icon-replacement($ip: null, $ic: null, $ich: null) {
	@if $ip {
		mask: var(--#{$ip}-path) !important;
	}

	@include ac-color-styling($bg: currentColor);
	@include ac-position-styling($w: 24px, $h: 24px, $d: inline-block);
	mask-size: 100% 100%;

	svg {
		@include ac-position-styling($d: none);
	}

	&:hover {
		@include ac-color-styling($bg: #{$ich});
	}
}
